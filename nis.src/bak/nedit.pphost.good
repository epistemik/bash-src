! Preferences file for NEdit
!
! This file is overwritten by the "Save Defaults..." command in NEdit 
! and serves only the interactively setable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as background colors
! and key bindings, use the .Xdefaults file in your home directory (or
! the X resource specification method appropriate to your system).  The
! contents of this file can be moved into an X resource file, but since
! resources in this file override their corresponding X resources, either
! this file should be deleted or individual resource lines in the file
! should be deleted for the moved lines to take effect.

nedit.shellCommands: \
	spell:Alt+B:s:ED:\n\
		(cat;echo "") | spell\n\
	wc::w:ED:\n\
		set wc=`wc`; echo $wc[1] "lines," $wc[2] "words," $wc[3] "characters"\n\
	sort::o:EX:\n\
		sort\n\
	number lines::n:AW:\n\
		nl -ba\n\
	make:Alt+Z:m:W:\n\
		make\n\
	expand::p:EX:\n\
		expand\n\
	unexpand::u:EX:\n\
		unexpand\n
nedit.macroCommands: \
	Complete Word:Alt+D::: {\n\
		# Tuning parameters\n\
		ScanDistance = 200\n\
		\n\
		# Search back to a word boundary to find the word to complete\n\
		startScan = max(0, $cursor - ScanDistance)\n\
		endScan = min($text_length, $cursor + ScanDistance)\n\
		scanString = get_range(startScan, endScan)\n\
		keyEnd = $cursor-startScan\n\
		keyStart = search_string(scanString, "<", keyEnd, "backward", "regex")\n\
		if (keyStart == -1)\n\
		    return\n\
		keyString = "<" substring(scanString, keyStart, keyEnd)\n\
		\n\
		# search both forward and backward from the cursor position.  Note that\n\
		# using a regex search can lead to incorrect results if any of the special\n\
		# regex characters is encountered, which is not considered a delimiter\n\
		backwardSearchResult = search_string(scanString, keyString, keyStart-1, \\\n\
		    	"backward", "regex")\n\
		forwardSearchResult = search_string(scanString, keyString, keyEnd, "regex")\n\
		if (backwardSearchResult == -1 && forwardSearchResult == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# if only one direction matched, use that, otherwise use the nearest\n\
		if (backwardSearchResult == -1)\n\
		    matchStart = forwardSearchResult\n\
		else if (forwardSearchResult == -1)\n\
		    matchStart = backwardSearchResult\n\
		else {\n\
		    if (keyStart - backwardSearchResult <= forwardSearchResult - keyEnd)\n\
		    	matchStart = backwardSearchResult\n\
		    else\n\
		    	matchStart = forwardSearchResult\n\
		}\n\
		\n\
		# find the complete word\n\
		matchEnd = search_string(scanString, ">", matchStart, "regex")\n\
		completedWord = substring(scanString, matchStart, matchEnd)\n\
		\n\
		# replace it in the window\n\
		replace_range(startScan + keyStart, $cursor, completedWord)\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", "OK", "Cancel")\n\
		if ($string_dialog_button == 2)\n\
		    return\n\
		\n\
		# Count the number of lines in the selection\n\
		nLines = 0\n\
		for (i=$selection_start; i<$selection_end; i++)\n\
		    if (get_character(i) == "\\n")\n\
		    	nLines++\n\
		\n\
		# Create the fill text\n\
		rectangular = $selection_left != -1\n\
		line = ""\n\
		fillText = ""\n\
		if (rectangular) {\n\
		    for (i=0; i<$selection_right-$selection_left; i++)\n\
			line = line fillChar\n\
		    for (i=0; i<nLines; i++)\n\
			fillText = fillText line "\\n"\n\
		    fillText = fillText line\n\
		} else {\n\
		    if (nLines == 0) {\n\
		    	for (i=$selection_start; i<$selection_end; i++)\n\
		    	    fillText = fillText fillChar\n\
		    } else {\n\
		    	startIndent = 0\n\
		    	for (i=$selection_start-1; i>=0 && get_character(i)!="\\n"; i--)\n\
		    	    startIndent++\n\
		    	for (i=0; i<$wrap_margin-startIndent; i++)\n\
		    	    fillText = fillText fillChar\n\
		    	fillText = fillText "\\n"\n\
			for (i=0; i<$wrap_margin; i++)\n\
			    line = line fillChar\n\
			for (i=0; i<nLines-1; i++)\n\
			    fillText = fillText line "\\n"\n\
			for (i=$selection_end-1; i>=$selection_start && get_character(i)!="\\n"; \\\n\
			    	i--)\n\
			    fillText = fillText fillChar\n\
		    }\n\
		}\n\
		\n\
		# Replace the selection with the fill text\n\
		replace_selection(fillText)\n\
	}\n\
	Quote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("^.*$", "\\\\> &", "regex")\n\
		else\n\
		    replace_in_selection("^.*$", "\\\\> &", "regex")\n\
	}\n\
	Unquote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
		else\n\
		    replace_in_selection("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
	}\n\
	C Comments>Comment Out Sel.@C@C++:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	C Comments>C Uncomment Sel.@C@C++:::R: {\n\
		sel = get_selection()\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		commentStart = search_string(sel, "/*", 0)\n\
		if (substring(sel, commentStart+2, commentStart+3) == " ")\n\
		    keepStart = commentStart + 3\n\
		else\n\
		    keepStart = commentStart + 2\n\
		keepEnd = search_string(sel, "*/", length(sel), "backward")\n\
		commentEnd = keepEnd + 2\n\
		if (substring(sel, keepEnd - 1, keepEnd == " "))\n\
		    keepEnd = keepEnd - 1\n\
		replace_range(selStart + commentStart, selStart + commentEnd, \\\n\
			substring(sel, keepStart, keepEnd))\n\
		select(selStart, selEnd - (keepStart-commentStart) - \\\n\
			(commentEnd - keepEnd))\n\
	}\n\
	C Comments>+ C++ Comment@C++:::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	C Comments>- C++ Comment@C++:::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	C Comments>+ C Bar Comment 1@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
			"^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	C Comments>- C Bar Comment 1@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		newText = get_range(selStart+3, selEnd-4)\n\
		newText = replace_in_string(newText, "^ \\\\* ", "", "regex")\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
			    "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*{", \\\n\
			    searchPos, "regex")\n\
		    if (headerStart == -1)\n\
			break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
			staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		    			prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n\
	Page Navigation> TopOfDoc:Ctrl+Home:T:: {\n\
		beginning_of_file()\n\
	}\n\
	Page Navigation> PageUp:Prior:U:: {\n\
		previous_page()\n\
	}\n\
	Page Navigation> StartOfLine:Home:S:: {\n\
		beginning_of_line()\n\
	}\n\
	Page Navigation> EndOfLine:End:E:: {\n\
		end_of_line()\n\
	}\n\
	Page Navigation> Page Down:Next:D:: {\n\
		next_page()\n\
	}\n\
	Page Navigation> BottomOfDoc:Ctrl+End:B:: {\n\
		end_of_file()\n\
	}\n\
	Programs> ex1::1:: {\n\
		# page up\n\
		delta = 55\n\
		pgline = $line\n\
		pgnewline = (pgline - delta)\n\
		\n\
		if( pgnewline < 1 )\n\
		{\n\
		  goto_line_number("1")\n\
		}\n\
		else\n\
		  {\n\
		    goto_line_number(pgnewline)\n\
		  }\n\
		\n\
		forward_character()\n\
		backward_character()\n\
	}\n\
	Programs> ex2::2:: {\n\
		# page down\n\
		delta = 55\n\
		pgline = $line\n\
		pgnewline = (pgline + delta)\n\
		\n\
		goto_line_number(pgnewline)\n\
		\n\
		backward_character()\n\
		forward_character()\n\
	}\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n
nedit.highlightPatterns: ASM:1:0{\n\
		numeric constant:"<((0?(x|X)?[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::\n\
		asmKeyword:"PLACE|OFFSET[0-9]*|\\.LL[A-z]*[0-9]*":::Keyword::\n\
		asmComment:"!.*\\n":::Comment::\n\
		asmString:"""":""""::String::\n\
		asmIdentifier:"global |type |size |asciz |uaword |common |ident |proc |word ":::Identifier::\n\
		asmType:"#.*":::Flag::\n\
		asmMain:"main:|file |section |restore |ret ":::Text Comment::\n\
		asmAlign:"align|malloc":::Flag::\n\
		i960keyword:"and[a-z]*|<or|<mov|ld[a-z]*|<st[a-z]*|callx|sh[a-z]*|add[a-z]*|sub[a-z]*|cmp[a-z]*.?[tf]?|setbit|at[a-z]*|test[a-z]*|<b|<xor":::Keyword::\n\
		i960comment:"   \\*":"\\n"::Comment::\n\
	}\n\
	C:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		string:"""":"""":"\\n":String::\n\
		preprocessor line:"^[ 	]*#":"$"::Preprocessor::\n\
		string escape chars:"\\\\(.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::D\n\
		storage keyword:"<(const|extern|auto|register|static|unsigned|signed|volatile|char|double|float|int|long|short|void|typedef|struct|union|enum)>":::Storage Type::D\n\
		keyword:"<(return|goto|if|else|case|default|switch|break|continue|while|do|for|sizeof)>":::Keyword::D\n\
		braces:"[{}]":::Keyword::D\n\
		memory:"<(malloc|calloc|realloc|free)>":::Flag::\n\
		cplus comment:"//":"$"::Comment::\n\
	}\n\
	C++:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		cplus comment:"//":"$"::Comment::\n\
		string:"""":"""":"\\n":String::\n\
		preprocessor line:"^[ 	]*#":"$"::Preprocessor::\n\
		string escape chars:"\\\\(.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		preproc cplus comment:"//":"$"::Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::D\n\
		keyword:"<(public|private|protected|typedef|class|typename|typeid|template|export|friend|virtual|explicit|operator|overload|if|else|case|default|switch|while|do|for|catch|throw|sizeof|[Tt]rue|[Ff]alse|namespace|using)>":::Keyword::D\n\
		storage keyword:"<(const|extern|auto|register|inline|static|mutable|unsigned|signed|volatile|[cC]har|double|float|int|long|short|[Bb]ool|wchar_t|size_t|void|struct|union|enum|Int8|Uint8|Int16|Uint16|Int32|Uint32|Int64|Uint64|u_char|u_short|u_int|u_long|[Nn][Uu][Ll][Ll])>":::Storage Type::D\n\
		memory:"<(new|delete|this|constant_cast|dynamic_cast|static_cast|reinterpret_cast|malloc|calloc|realloc|free)>":::Flag::\n\
		braces:"[{}]":::Keyword::D\n\
		brackets:"[\\[\\]]":::Bold::D\n\
		pointer:"\\*":::Bold::\n\
		jump directive:"exit[ ;(]|return[ ;(]|break[ ;]|goto[ ;(]|continue[ ;]":::Flag2::\n\
		MACRO:"<(CAST|CASTADDR)>":::Identifier1::\n\
		DEBUG:"(asserts[f ]*[\\(])|(DBGP[P12345]*[\\(])|(DBG_((TRACE)|(CALL))[\\(])":"[\\)][;]"::Flag::\n\
		inline_asm:"asm|__asm":"\\);"::MHS::\n\
		inline_asm comment:"#":"$"::Plain:inline_asm:\n\
		bold comment:"!\\*":"\\*!"::bold comment:comment:\n\
		bold cplus comment:"! ":"$"::bold comment:cplus comment:\n\
		bold preproc cplus comment:"! ":"$"::bold comment:preproc cplus comment:\n\
	}\n\
	Java:Default\n\
	JavaScript:Default\n\
	Command:1:0{\n\
		CMDNUMERIC:"<((0(x|X)[0-9a-fA-F]*)|[0-9.]+((e|E)(\\+|-)?)?[0-9]*)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::\n\
		CMDKEYWORD:"<(NAM[^ ]+|SYNOPSIS|DESCRI[^ ]+|OP[^ ]+|PURPOSE|EXAMPLES?|US[^ ]+|CONVENTIONS?|EXIT|STATUS|FILES?|ATTRIBUTES|DIAGNOSTICS?|BUGS?|NOTES?|WARNINGS?|ENVIRONMENT|SEE ALSO|VARIABLES?|OUTPUT|INFO[^ ]*|TRANS[^ ]+|AVAIL[^ ]+|INTER[^ ]*|MODE|AUTH[^ ]+|DISPLAY|ABORT[^ ]+)>":::Keyword::\n\
		CMDFILENAME:"[^ ]*/[^ ]* |/[^ ]+":::String::\n\
		CMDATTRIBUTE:"\\[(\\n)*.*(\\n)*.*\\]":::Comment::\n\
		CMDOPERAND:"\\<":"\\>":"\\n":Flag::\n\
		CMDSTRING:"""":"""":"\\n":String::\n\
		GNUKEYWORD:"<(SYNTAX|FLAGS?|FORM[^ ]+|IMPLEMEN[^ ]+|SPEC[^ ]+|REL[^ ]+|PARAMETERS?|COD[^ ]+|GEN[^ ]+|TARG[^ ]+|PRAG[^ ]+|COP[^ ]+|DEBUG[^ ]+|LINK[^ ]*|ASSEMB[^ ]+|OVER[^ ]*|LANG[^ ]+|PRE[^ ]+|DIR[^ ]+|MACH[^ ]+|DEP[^ ]+)>":::Keyword::\n\
	}\n\
	Ada:Default\n\
	Fortran:Default\n\
	Pascal:Default\n\
	Yacc:Default\n\
	Perl:Default\n\
	Python:Default\n\
	Awk:Default\n\
	Tcl:Default\n\
	Sh Ksh Bash:Default\n\
	Csh:Default\n\
	Makefile:8:0{\n\
		Comment:"#":"$"::Comment::\n\
		Assignment:"^( *| [ \\t]*)[A-Za-z0-9_+]*[ \\t]*(\\+|:)?=":::Preprocessor::\n\
		Dependency Line:"^ *([A-Za-z0-9./$(){} _%+-]*)::?":"$|;"::Subroutine::\n\
		Dep Target:"\\1":""::Keyword:Dependency Line:C\n\
		Dep Continuation:"\\\\\\n":::Keyword:Dependency Line:\n\
		Dep Comment:"#":"$"::Comment:Dependency Line:\n\
		Dep Macro:"\\$([A-Za-z0-9_]|\\([^)]*\\)|{[^}]*})":::Preprocessor:Dependency Line:\n\
		Dep Internal Macro:"\\$([<@*?%]|\\$@)":::Preprocessor1:Dependency Line:\n\
		Continuation:"\\\\$":::Keyword::\n\
		Macro:"\\$([A-Za-z0-9_]|\\([^)]*\\)|{[^}]*})":::Preprocessor::\n\
		Internal Macro:"\\$([<@*?%]|\\$@)":::Flag::\n\
		Escaped Dollar:"\\$\\$":::Comment::\n\
		Include:"^include[ \\t]":::Keyword::\n\
	}\n\
	HTML:Default\n\
	Telecom:1:0{\n\
		TELENUMERIC:"<((0(x|X)[0-9a-fA-F]*)|[0-9.]+((e|E)(\\+|-)?)?[0-9]*)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::\n\
		TELEKEYWORD:"<(AtmInterface|Collector|NumberingPlanIndicator|FrameRelayUni|VirtualRouter|ModuleData|AccessControl|Time|Shelf|LogicalProcessor|Routing|Software|CallRouter|Trunk|LanApplication|Card|IpInterfaceOverFrameRelay)>":::Keyword::\n\
		TELEHEADER:"EM.PASSPORT[0-9]+":::Text Comment::\n\
		TELEDISABLE:"<(disabled|off|down|no)>":::Comment::\n\
		TELEPROVISION:"Provisioned":::String::\n\
		TELENABLE:"<(enabled|on|up|yes)>":::MHS::\n\
	}\n\
	SCCSperusal:1:0{\n\
		SCCSCOMMENT:"COMMENTS":"\\n\\n"::Comment::\n\
		SCCSKEYWORD:"(SCCS[^ ]*)|(D .\\.[^ ]+)":::Keyword::\n\
		SCCSNUMERIC:"[0-9]+[/:][0-9]+[/:][0-9]+":::Numeric Const::\n\
		SCCSIDENTIFIER:"(mhsatto|rikenda|asmulle) ..? ..?":::String2::\n\
	}\n\
	LaTeX:Default\n\
	VHDL:Default\n\
	Verilog:Default\n\
	X Resources:Default\n\
	NEdit Macro:Default\n\
	Aliases:5:0{\n\
		comment:"#":"$"::Comment::\n\
		keyword:"alias":::Keyword::\n\
		path:"[^ \\t]*/":"[ ;]"::Identifier1::\n\
		parameter:"\\\\!\\*":::Flag::\n\
		string:"'":"'"::String1::\n\
		string path:"[^ ]*/":"[ ;]"::Preprocessor2:string:\n\
		string parameter:"\\\\!\\*":::Flag:string:\n\
		double string:"""":""""::String::\n\
	}
nedit.languageModes: 	ASM:.s .asm::::::\n\
	C:.c .nc::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~"\n\
	C++:.cc .h .hh .C .H .i .cpp .hpp .fpp::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~"\n\
	Java:.java::::::\n\
	JavaScript:.js::::::\n\
	Command:.cmd .comm::::::\n\
	Telecom:.node .route .switch .tape:"EM/PASSPORT":::::\n\
	SCCSperusal:.prs:"^SCCS":::::\n\
	Pascal:.pas .p .int::::::\n\
	Perl:.pl .pm .p5:"^[ \\t]*#[ \\t]*!.*perl":::::\n\
	Csh:.csh .cshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/csh":::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile:"^[ \\t]*#[ \\t]*![ \\t]*/bin/(sh|ksh|bash)":::::\n\
	Aliases:*als .alias:"#[ ]*[Aa][Ll][Ii][Aa][Ss][Ee][Ss]":::::\n\
	Makefile:Makefile makefile Makefile.* makefile.*:"#[ ]*[Mm][Aa][Kk][Ee][Ff][Ii][Ll][Ee]":::::\n\
	HTML:.html .htm::::::\n\
	X Resources:.Xresources .Xdefaults .nedit:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults":::::\n\
	Ada:.ada .ad .ads .adb .a::::::\n\
	Awk:.awk::::::\n\
	Fortran:.f .f77 .for::::::\n\
	LaTeX:.tex .sty .cls .dtx .ins::::::\n\
	Python:.py:"^#!.*python":Auto:None:::\n\
	Tcl:.tcl::::::\n\
	VHDL:.vhd .vhdl .vdl::::::\n\
	Verilog:.v::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~"\n\
	NEdit Macro:.nm .neditmacro::::::
nedit.styles: 	Plain:black:Plain\n\
	Bold:black:Bold\n\
	Comment:red2:Plain\n\
	bold comment:red2:Bold\n\
	Keyword:brown4:Bold\n\
	Storage Type:brown:Bold\n\
	String:blue2:Plain\n\
	String1:blue3:Plain\n\
	String2:blue4:Bold\n\
	Preprocessor:darkviolet:Bold\n\
	Preprocessor1:violet:Bold\n\
	Preprocessor2:darkviolet:Plain\n\
	Character Const:darkBlue:Bold\n\
	Numeric Const:darkGreen:Bold\n\
	MHS:green3:Bold\n\
	Identifier:purple:Bold\n\
	Identifier1:purple:Plain\n\
	Subroutine:brown:Plain\n\
	Subroutine1:brown3:Bold\n\
	Flag:orange:Bold\n\
	Flag2:Orange3:Bold\n\
	Text Comment:red:Bold\n\
	Text Key:red:Bold\n\
	Text Key1:red:Plain\n\
	Text Arg:yellow:Bold\n\
	Text Arg1:yellow:Bold\n\
	Text Arg2:white:Plain\n\
	Text Escape:gray30:Bold\n\
	Ada Attributes:plum:Bold\n\
	LaTeX Math:white:Plain
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default
nedit.smartIndentInitCommon: Default
nedit.autoWrap: None
nedit.wrapMargin: 0
nedit.autoIndent: Auto
nedit.autoSave: True
nedit.saveOldVersion: False
nedit.showMatching: True
nedit.highlightSyntax: True
nedit.searchDialogs: False
nedit.retainSearchDialogs: True
nedit.repositionDialogs: True
nedit.statisticsLine: True
nedit.searchMethod: CaseSense
nedit.textRows: 57
nedit.textCols: 101
nedit.tabDistance: 8
nedit.emulateTabs: 0
nedit.insertTabs: True
nedit.textFont: -adobe-courier-medium-r-normal--14-*-*-*-*-*-*-*
nedit.boldHighlightFont: -adobe-courier-bold-r-normal--14-*-*-*-*-*-*-*
nedit.italicHighlightFont: -adobe-courier-medium-o-normal--14-*-*-*-*-*-*-*
nedit.boldItalicHighlightFont: -adobe-courier-bold-o-normal--14-*-*-*-*-*-*-*
